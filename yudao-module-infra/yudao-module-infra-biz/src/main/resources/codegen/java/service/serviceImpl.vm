package ${basePackage}.service.${table.businessName};

import org.springframework.stereotype.Service;
import javax.annotation.Resource;
import org.springframework.validation.annotation.Validated;

import java.util.*;
import ${basePackage}IPage.controller.${table.businessName}.vo.*;
import ${basePackage}IPage.dal.dataobject.${table.businessName}.${table.className}DO;
import ${PageResultClassName};

import ${basePackage}IPage.convert.${table.businessName}.${table.className}Convert;
import ${basePackage}IPage.dal.mysql.${table.businessName}.${table.className}Mapper;


import cn.hutool.core.collection.CollUtil;
import cn.hutool.core.collection.ListUtil;

## 字段模板
#macro(listCondition)
    #foreach ($column in $columns)
        #if (${column.listOperation})
            #set ($JavaField = $column.javaField.substring(0,1).toUpperCase() + ${column.javaField.substring(1)})##首字母大写
            #if (${column.listOperationCondition} == "=")##情况一，= 的时候
            .eq(#if (${column.javaType} != "Integer")StrUtil.isNotBlank(pageReqVO.get${JavaField})#end #if (${column.javaType} == "Integer")ObjectUtil.isNotNull(pageReqVO.get${JavaField})#end, ${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
            #end
            #if (${column.listOperationCondition} == "!=")##情况二，!= 的时候
            .ne(#if (${column.javaType} == "String")StrUtil.isNotBlank(pageReqVO.get${JavaField})#end #if (${column.javaType} == "Integer")ObjectUtil.isNotNull(pageReqVO.get${JavaField})#end, ${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
            #end
            #if (${column.listOperationCondition} == ">")##情况三，> 的时候
            .gt(#if (${column.javaType} == "String")StrUtil.isNotBlank(pageReqVO.get${JavaField})#end #if (${column.javaType} == "Integer")ObjectUtil.isNotNull(pageReqVO.get${JavaField})#end, ${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
            #end
            #if (${column.listOperationCondition} == ">=")##情况四，>= 的时候
            .ge(#if (${column.javaType} == "String")StrUtil.isNotBlank(pageReqVO.get${JavaField})#end #if (${column.javaType} == "Integer")ObjectUtil.isNotNull(pageReqVO.get${JavaField})#end, ${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
            #end
            #if (${column.listOperationCondition} == "<")##情况五，< 的时候
            .lt(#if (${column.javaType} == "String")StrUtil.isNotBlank(pageReqVO.get${JavaField})#end #if (${column.javaType} == "Integer")ObjectUtil.isNotNull(pageReqVO.get${JavaField})#end, ${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
            #end
            #if (${column.listOperationCondition} == "<=")##情况五，<= 的时候
            .le(#if (${column.javaType} == "String")StrUtil.isNotBlank(pageReqVO.get${JavaField})#end #if (${column.javaType} == "Integer")ObjectUtil.isNotNull(pageReqVO.get${JavaField})#end, ${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
            #end
            #if (${column.listOperationCondition} == "LIKE")##情况七，Like 的时候
            .like(StrUtil.isNotBlank(pageReqVO.get${JavaField}), ${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
            #end
##            #if (${column.listOperationCondition} == "BETWEEN")##情况八，Between 的时候
##            .between(${table.className}DO::get${JavaField}, reqVO.get${JavaField}())
##            #end
        #end
    #end
#end

/**
 * ${table.classComment} Service 实现类
 *
 * @author ${table.author}
 */
@Service
@Validated
public class ${table.className}ServiceImpl implements ${table.className}Service {

    @Resource
    private ${table.className}Mapper ${classNameVar}Mapper;

    @Override
    public ${primaryColumn.javaType} create${simpleClassName}(${sceneEnum.prefixClass}${table.className}CreateReqVO createReqVO) {
        // 插入
        ${table.className}DO ${classNameVar} = ${table.className}Convert.INSTANCE.convert(createReqVO);
        ${classNameVar}Mapper.insert(${classNameVar});
        // 返回
        return ${classNameVar}.getId();
    }

    @Override
    public void update${simpleClassName}(${sceneEnum.prefixClass}${table.className}UpdateReqVO updateReqVO) {
        // 校验存在
        validate${simpleClassName}Exists(updateReqVO.getId());
        // 更新
        ${table.className}DO updateObj = ${table.className}Convert.INSTANCE.convert(updateReqVO);
        ${classNameVar}Mapper.updateById(updateObj);
    }

    @Override
    public void delete${simpleClassName}(${primaryColumn.javaType} id) {
        // 校验存在
        validate${simpleClassName}Exists(id);
        // 删除
        ${classNameVar}Mapper.deleteById(id);
    }

    private void validate${simpleClassName}Exists(${primaryColumn.javaType} id) {
        if (${classNameVar}Mapper.selectById(id) == null) {
            throw new ServiceException("不存在该记录");
        }
    }

    @Override
    public ${table.className}DO get${simpleClassName}(${primaryColumn.javaType} id) {
        return ${classNameVar}Mapper.selectById(id);
    }


    @Override
    public IPage<${table.className}DO> get${simpleClassName}Page(Page<${table.className}DO> page, ${sceneEnum.prefixClass}${table.className}PageReqVO pageReqVO) {
        Page<${table.className}DO> page = ${classNameVar}Mapper.selectPage(page, Wrappers.lambdaQuery(${table.className}DO.class)
                #listCondition()
                .orderByDesc(${table.className}DO::getUpdateTime));
        return page;
    }

}
